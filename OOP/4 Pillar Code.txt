Inheritance 
Real Life: Har dog ek animal hai. Animal ke features (Eat, Sleep) dog me bhi automatically aa jaate hain. Saath dog ke apne features (Bark) bhi hote hain. Matlab parent ke features child ko mil gaye.
“Inheritance ka matlab hai ek class dusri class ke features inherit kare. Jese Dog ek Animal hai, to uske paas Eat aur Sleep ke methods automatically aa gaye, aur wo apna Bark ka method bhi add kar sakta hai.”

Code

using System;

public class HelloWorld
{
    public static void Main(string[] args)
    {
        Dog d = new Dog();
        d.Eat();
        d.Sleep();
        d.bark();
    }
}
public class Animal
{
    public void Eat()
    {
        Console.WriteLine("Animal Can Eat");
    }
    public void Sleep()
    {
        Console.WriteLine("Animals Can Also Sleep");
    }
}
public class Dog:Animal
{
    public void bark()
    {
        Console.WriteLine("Dog Can Bark");
    }
    
}

------------------------------------------------
Encapsulation
"Encapsulation ka matlab hai data ko hide karna aur usko sirf defined methods ke zariye access karna. Jese bank account ka balance direct accessible nahi hota, sirf deposit/withdraw ke functions ke through hi hota ha"
Real Life: Socho ek Bank Account hai. Uska balance tum direct change nahi kar sakte, sirf deposit aur withdraw ke functions ke through hi update hoga. Yehi data ko chhupana aur control dena encapsulation hai.

CODE:
using System;

public class HelloWorld
{
    public static void Main(string[] args)
    {
        BankAccount a = new BankAccount(5000);

        a.Deposit(500000);     
        a.Withdraw(50000);     

        Console.WriteLine("Final Balance: " + a.GetBalance());
    }
}

public class BankAccount
{
    private double balance;  

    public BankAccount(double initialBalance)
    {
        if (initialBalance > 0)
        {
            balance = initialBalance; 
        }
        else
        {
            balance = 0;
        }
    }

    public void Deposit(double amount)
    {
        if (amount > 0)
        {
            balance = balance + amount;
            Console.WriteLine("Deposited: " + amount);
        }
        else
        {
            Console.WriteLine("Invalid Deposit!");
        }
    }

    public void Withdraw(double amount)
    {
        if (amount > 0 && amount <= balance)   
        {
            balance = balance - amount;
            Console.WriteLine("Withdrawn: " + amount);
        }
        else
        {
            Console.WriteLine("Invalid Withdraw Amount!");
        }
    }

    public double GetBalance()
    {
        return balance;
    }
}
------------------------------------------------------
Polymorphism
Real Life: Agar main bolo ‘Speak’ → Dog bolega ‘Bark’, Cat bolegi ‘Meow’, Cow bolegi ‘Moo’. Matlab method ka naam same hai lekin output object ke hisaab se change ho raha hai. Yehi polymorphism hai.
Polymorphism ka matlab hai ek hi method alag-alag behavior show kare depending on object. Jese ‘Speak’ function Dog ke liye bark karega aur Cat ke liye meow karega.

CODE: 
Compile-time Polymorphism (Method Overloading)
using System;

public class HelloWorld
{
    public static void Main(string[] args)
    {
      Calculator c = new Calculator();
      Console.WriteLine(c.add(3,4));
      Console.WriteLine(c.add(3,4,5));
      
    }
}

public class Calculator
{
    public int add(int a, int b)
    {
        return a+b;
    }
    public int add(int a , int b, int c)
    {
        return a+b+c;
    }
}

Runtime Polymorphism (Method Overriding)
using System;

public class HelloWorld
{
    public static void Main(string[] args)
    {
        Dog d = new Dog();
        d.Speak();
        Cat c = new Cat();
        c.Speak();
        Animal a = new Animal();
        a.Speak();
      
    }
}
public class Animal
{
    public virtual void Speak()
    {
        Console.WriteLine("Animal can make a sound");
    }
}

public class Dog : Animal
{
    public override void Speak()
    {
        Console.WriteLine("Dog can bark");
    }
}

public class Cat : Animal
{
    public override void Speak()
    {
        Console.WriteLine("Cat can meow");
    }
}
---------------------------------------------------
Abstraction
“Abstraction ka matlab hai ke user ko sirf ‘kya karna hai’ dikhana, lekin ‘kaise ho raha hai’ chhupana. Jese car ka accelerator dabao to gadi chalti hai, andar engine kaise kaam kar raha hai wo hidden hai.”
Real Life: Tum car ka accelerator dabaate ho, car chalti hai. Tumhe yeh nahi pata engine andar kaise petrol jala ke energy bana raha hai. Tumhe sirf ‘Drive’ ka function dikh raha hai, detail chhup gayi. Ye abstraction hai.

using System;

public class HelloWorld
{
    public static void Main(string[] args)
    {
        Animal a = new Pig();   
        a.AnimalSound();        
        a.Sleep();             
    }
}

public abstract class Animal
{
    public abstract void AnimalSound();

    public void Sleep()
    {
        Console.WriteLine("Animal is sleeping...");
    }
}

public class Pig : Animal
{
    public override void AnimalSound()
    {
        Console.WriteLine("Pig makes sound: wee wee");
    }
}
------------------------------------------------------
INTERFACE
using System;

public class HelloWorld
{
    public static void Main(string[] args)
    {
        IAnimal a = new Pig();   // Polymorphism via interface
        a.AnimalSound();
    }
}

// Interface
public interface IAnimal
{
    void AnimalSound();  // No body here
}

// Class implementing interface
public class Pig : IAnimal
{
    public void AnimalSound()
    {
        Console.WriteLine("The pig says: wee wee");
    }
}

